name: myapp
on:
  # push:
  #   branches:
  #     - master
  # schedule:
  #   - cron: 0 17 * * 5
  workflow_dispatch:
      inputs:
        choice:
          description: '是否手动输入版本号'
          required: true
          default: 'false'
          type: choice
          options:
            - true
            - false 
        mac:
          description: 'mac编译'
          default: false
          type: boolean
        windows:
          description: 'windows编译'
          default: true
          type: boolean
        liunx:
          description: 'windows编译'
          default: true
          type: boolean
        version:
          description: '版本号'
          required: false
          default: 0.0.1
        detail:
          description: '发布页详情'
          required: false
          default: '发布文件'
          type: string
        release:
          description: '发布到release'
          required: true
          default: true
          type: boolean
        artifact:
          description: '发布到artifact'
          required: false
          default: false
          type: boolean
        
    
env:
  IS_CI: 'true'
jobs:
  
  Windows:
    name: windows打包
    if: ${{ github.event.inputs.environment == 'windows' }}
    runs-on: windows-latest
    env:
      NPM_CACHE: '%APPDATA%\npm-cache'
    steps:
      - name: 检查环境
        uses: actions/checkout@v4

      - name: 设置环境
        uses: ./.github/actions/setup

      - name: 手动版本号
        if: ${{ github.event.inputs.choice == 'true' }}
        run: |
          echo "version=${{ inputs.version }}" >> $env:GITHUB_ENV

      - name: 自动版本号
        if: ${{ github.event.inputs.choice == 'false' }}
        run: |
            $versionFile = "win_version.txt"
            if (-not (Test-Path $versionFile)) {
                Set-Content -Path $versionFile -Value "0.0.0"
            }
            $version = Get-Content -Path $versionFile
            $versionArray = $version.Split('.')
            $versionArray[2] = [int]$versionArray[2] + 1
            if ($versionArray[2] -eq 20) {
                $versionArray[2] = 0
                $versionArray[1] = [int]$versionArray[1] + 1
                if ($versionArray[1] -eq 20) {
                    $versionArray[1] = 0
                    $versionArray[0] = [int]$versionArray[0] + 1
                }
            }
            $newVersion = $versionArray -join '.'
            Set-Content -Path $versionFile -Value $newVersion
            echo "version=win_v$newVersion" >> $env:GITHUB_ENV
          
      - name: 提交版本号
        if: ${{ github.event.inputs.choice == 'false' }}
        run: |
            git config --local user.email "your_email@example.com"
            git config --local user.name "Your Name"
            git pull
            git add win_version.txt
            git commit -m "Update version.txt"
            git push

      - name: 编译源码
        run: |
          git status --porcelain
          npm run pack

      
      - name: 发布页消息
        run: |
          echo "${{ github.event.inputs.detail }}" >> release.txt

          
      - name: 发布到release
        if: ${{ github.event.inputs.release=='true' }}
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.version }}
          body_path: release.txt
          files: ./build/*.exe

      - name: 发布到artifact
        if: ${{ github.event.inputs.artifact=='true' }}
        uses: actions/upload-artifact@main
        with:
          path: ./build/*.exe
          name: "lx-music.exe"
  Mac:
    name: mac打包
    if: ${{ github.event.inputs.environment == 'mac' }}
    runs-on: macos-latest
    env:
      NPM_CACHE: $HOME/.npm
    steps:
      - name: 检查环境
        uses: actions/checkout@v4
      - name: 设置node环境
        uses: ./.github/actions/setup
      - name: 设置环境
        run: |
          mkdir ~/.venv
          python3 -m venv ~/.venv
          source ~/.venv/bin/activate
      - name: 手动版本号
        if: ${{ github.event.inputs.choice == 'true' }}
        run: |
          echo "version=${{ inputs.version }}" >> $env:GITHUB_ENV
      - name: 自动版本号
        if: ${{ github.event.inputs.choice == 'false' }}
        run: |
           if [ ! -f  mac_version.txt ]; then
               echo "0.0.0" > mac_version.txt
           fi
           VERSION=$(cat mac_version.txt)
           IFS='.' read -r -a versionArray <<< "$VERSION"
           ((versionArray[2]++))
           
           # 如果最后一位数字达到了20，则将它设为0并递增前一位数字
           if [ "${versionArray[2]}" -eq 20 ]; then
               versionArray[2]=0
               ((versionArray[1]++))
           
               # 如果第二位数字达到了20，则将它设为0并递增第一位数字
               if [ "${versionArray[1]}" -eq 20 ]; then
                   versionArray[1]=0
                   ((versionArray[0]++))
               fi
           fi
           
           # 将新版本号写回到version.txt文件中
           echo "${versionArray[0]}.${versionArray[1]}.${versionArray[2]}" > mac_version.txt
           vss=$(cat mac_version.txt)
           # 打印新版本号
           echo "version=mac_v${vss}" >> $GITHUB_ENV
         
      - name: 提交版本号
        if: ${{ github.event.inputs.choice == 'false' }}
        run: |
             git config --local user.email "your_email@example.com"
             git config --local user.name "Your Name"
             git pull
             git add mac_version.txt
             git commit -m "Update version.txt"
             git push
   
      - name: 编译源码
        run: |
           git status --porcelain
           npm run pack:mac
      - name: 发布页消息
        run: |
           echo "${{ github.event.inputs.detail }}" >> release.txt

         
      - name: 发布到release
        if: ${{ github.event.inputs.release=='true' }}
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.version }}
          body_path: release.txt
          files: ./build/*.dmg
 
      - name: 发布到artifact
        if: ${{ github.event.inputs.artifact=='true' }}
        uses: actions/upload-artifact@main
        with:
          path: ./build/*.dmg
          name: "lx-music.dmg"