name: test
on:
  # push:
  #   branches:
  #     - master
  schedule:
    - cron: 0 17 * * 5
  workflow_dispatch:
      inputs:
        environment:
          description: '是否手动输入版本号'
          required: true
          default: 'false'
          type: choice
          options:
            - true
            - false 
        version:
          description: '版本号'
          required: false
          default: 0.0.1
        print_tags:
            description: 'True to print to STDOUT'
            required: true
            type: boolean
        tags:
              description: 'Test scenario tags'
              required: true
              type: string
        environment1:
          description: 'Environment to run tests against'
          type: environment
          required: true
    
env:
    IS_CI: 'true'
jobs:
    Windows:
        name: Windows
        runs-on: windows-latest
        env:
          NPM_CACHE: '%APPDATA%\npm-cache'
        steps:
          - name: Check out git repository
            uses: actions/checkout@v4

          - name: 手动版本号
            if: ${{ github.event.inputs.environment == 'true' }}
            run: |
              echo "version=${{ github.event.inputs.version }}" >> $env:GITHUB_ENV

          - name: Set version
            if: ${{ github.event.inputs.environment == 'false' }}
            shell: pwsh
            run: |
              $versionFile = "version.txt"
              if (-not (Test-Path $versionFile)) {
                  Set-Content -Path $versionFile -Value "0.0.0"
              }
              $version = Get-Content -Path $versionFile
              $versionArray = $version.Split('.')
              $versionArray[2] = [int]$versionArray[2] + 1
              if ($versionArray[2] -eq 20) {
                  $versionArray[2] = 0
                  $versionArray[1] = [int]$versionArray[1] + 1
                  if ($versionArray[1] -eq 20) {
                      $versionArray[1] = 0
                      $versionArray[0] = [int]$versionArray[0] + 1
                  }
              }
              $newVersion = $versionArray -join '.'
              Set-Content -Path $versionFile -Value $newVersion
              echo "version=$newVersion" >> $env:GITHUB_ENV

          - name: show version
            run: |
              echo "version=${{ env.version }}"

             
              
